* JPA의 다양한 쿼리 방법
    1. JPQL
    2. JPA Criteria
    3. QueryDSL
    4. 네이티브 SQL
    5. JDBC API 직접 사용

* JPQL
    - 가장 당순한 조회 방법
         > EntityManager.find()
         > 객체 그래프 탐색(a.getB().getC())

    - JPA를 사용하면 엔티티 객체를 중심으로 개발
    - 문제는 검색 쿼리
    - 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색
    - 모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능
    - 애플리케이션이 필요한 데이터만 DB에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요

    ->>

    - JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공
    - SQL과 문법 유사 (select, from, where, group by, having, join 지원)
    - JPQL은 엔티티 객체를 대상으로 쿼리
    - SQL은 데이터베이스 테이블을 대상으로 쿼리

    - 테이블이 아닌 객체를 대상으로 검색하는 개체 지향 쿼리
    - SQL을 추상화해서 특정 데이터베이스 SQL에 의존 X

* Criteria
    - 문자가 아닌 자바 코드로 JPQL을 작성할 수 있음
    - JPQL 빌더 역할
    - 단점: 너무 복잡하고 실용성이 없다.
    - Criteria 대신 QueryDSL 사용 권장

* QueryDSL
    - 문자가 아닌 자바코드로 JPQL을 작성할 수 있음
    - JPQL 빌더 역할
    - 컴파일 시점에 문법 오류를 찾을 수 있음
    - 동적 쿼리 작성 편리함
    - 단순하고 쉬움
    - 실무 사용 권장

* 네이티브 SQL
    - JPA가 제공하는 SQL을 직접 사용하는 기능
    - JPQL로 해결할 수 없는 특정 데이터베이스에 의존적인 기능